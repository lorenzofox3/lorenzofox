<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://lorenzofox.dev">
  <title>Laurent Renardâ€™s (lorenzofox) blog</title>
  <subtitle>Software Engineering, Javascript, and more</subtitle>
  <link href="https://lorenzofox.dev/feed.xml" rel="self"/>
  <link href="https://lorenzofox.dev"/>
  <updated>2024-04-10T00:00:00Z</updated>
  <id>https://lorenzofox.dev</id>
  <author>
    <name>Laurent RENARD</name>
    <email>laurent34azerty@gmail.com</email>
  </author><entry>
    <title>Template engine with streaming capability - part 2/2</title>
    <link href="https://lorenzofox.dev/posts/html-streaming-part-2/"/>
    <updated>2024-04-10T00:00:00Z</updated>
    <id>https://lorenzofox.dev/posts/html-streaming-part-2/</id>
    <content xml:lang="en" type="html">&lt;p&gt;
In &lt;a href=&quot;/posts/html-streaming-part-1&quot; rel=&quot;prev&quot;&gt;the previous article&lt;/a&gt; we built a template engine that supports streaming. Unfortunately, it did not perform very well when 
rendering a &lt;a href=&quot;/posts/html-streaming-part-1/#performance-evaluation&quot;&gt;test page&lt;/a&gt; (a blog home page) compared to other popular libraries. In this article, we will look at several techniques that will lead us to a more efficient implementation.
&lt;/p&gt;</content>
  </entry><entry>
    <title>Template engine with streaming capability - part 1/2</title>
    <link href="https://lorenzofox.dev/posts/html-streaming-part-1/"/>
    <updated>2024-04-04T00:00:00Z</updated>
    <id>https://lorenzofox.dev/posts/html-streaming-part-1/</id>
    <content xml:lang="en" type="html">&lt;p&gt;
Browsers can render HTML on the fly as chunks of text arrive. This is called HTML streaming, and it is not new. 
I recently read Chris Haynes&#39; article explaining how you can &lt;a href=&quot;https://lamplightdev.com/blog/2024/01/10/streaming-html-out-of-order-without-javascript/&quot;&gt;stream HTML out of order (OOO) without JavaScript&lt;/a&gt;. 
This opens up a lot of possibilities and new patterns at low cost. However, I have not found much in the way of simple yet efficient template engine libraries with streaming support. Let&#39;s build one!
&lt;/p&gt;</content>
  </entry><entry>
    <title>Let&#39;s build a UI framework - part 2/2</title>
    <link href="https://lorenzofox.dev/posts/lets-build-a-framework-part-2/"/>
    <updated>2024-03-26T00:00:00Z</updated>
    <id>https://lorenzofox.dev/posts/lets-build-a-framework-part-2/</id>
    <content xml:lang="en" type="html">&lt;p&gt;
&lt;a href=&quot;/posts/lets-build-a-framework-part-1&quot; rel=&quot;prev&quot;&gt;Our framework&lt;/a&gt; seems complete and well thought out. We went through the process of building &lt;em&gt;on top of&lt;/em&gt; a solid foundation. 
This is how most software is written these days, but we suffered from the common bias and added unnecessary complexity. Here we will see how removing components can actually be better.
&lt;/p&gt;</content>
  </entry><entry>
    <title>Let&#39;s build a UI framework - part 1/2</title>
    <link href="https://lorenzofox.dev/posts/lets-build-a-framework-part-1/"/>
    <updated>2024-03-26T00:00:00Z</updated>
    <id>https://lorenzofox.dev/posts/lets-build-a-framework-part-1/</id>
    <content xml:lang="en" type="html">&lt;p&gt;
We have now at our disposal a way to &lt;a href=&quot;/posts/component-as-infinite-loop/&quot;&gt;turn coroutines into web components&lt;/a&gt;. We also have a set of higher order functions to &lt;a href=&quot;/posts/component-as-infinite-loop&quot;&gt;manage how a component updates&lt;/a&gt;.
It is great time to put these small bricks together in an expressive yet simple new UI Framework.
    &lt;/p&gt;</content>
  </entry><entry>
    <title>Controllers on top of coroutine components</title>
    <link href="https://lorenzofox.dev/posts/controllers/"/>
    <updated>2024-03-18T00:00:00Z</updated>
    <id>https://lorenzofox.dev/posts/controllers/</id>
    <content xml:lang="en" type="html">&lt;p&gt;
We have previously described &lt;a href=&quot;/posts/component-as-infinite-loop&quot;&gt;a way of modelling custom elements as coroutines&lt;/a&gt; (generator functions). 
We then made sure that they could &lt;a href=&quot;/posts/reactive-attributes&quot; rel=&quot;prev&quot;&gt;be updated efficiently&lt;/a&gt;. 
In this post, we will look at different patterns for controlling how (and when) the components are updated: these are what I call &lt;em&gt;controllers&lt;/em&gt;.
    &lt;/p&gt;</content>
  </entry><entry>
    <title>Batch component updates with micro tasks</title>
    <link href="https://lorenzofox.dev/posts/reactive-attributes/"/>
    <updated>2024-03-11T00:00:00Z</updated>
    <id>https://lorenzofox.dev/posts/reactive-attributes/</id>
    <content xml:lang="en" type="html">&lt;p&gt;
In the &lt;a href=&quot;/posts/component-as-infinite-loop&quot; rel=&quot;prev&quot;&gt;previous article&lt;/a&gt;, we finished by providing a function to convert a generator into a custom element.
In this post we will iterate by adding reactive attributes to our component definition, and ensuring that updates are performed in batch, using the hidden gem &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide&quot;&gt;queueMicrotask&lt;/a&gt;.
&lt;/p&gt;</content>
  </entry><entry>
    <title>Coroutines and web components</title>
    <link href="https://lorenzofox.dev/posts/component-as-infinite-loop/"/>
    <updated>2024-03-04T00:00:00Z</updated>
    <id>https://lorenzofox.dev/posts/component-as-infinite-loop/</id>
    <content xml:lang="en" type="html">&lt;p&gt;
In the &lt;a rel=&quot;prev&quot; href=&quot;/posts/coroutine&quot;&gt;previous article&lt;/a&gt; we learned what coroutines are and saw some patterns they can help implement.
In this article, we will see how coroutines can be used to model web components in a different way, and why you might like it.
&lt;/p&gt;</content>
  </entry><entry>
    <title>Coroutines in Javascript</title>
    <link href="https://lorenzofox.dev/posts/coroutine/"/>
    <updated>2024-02-24T00:00:00Z</updated>
    <id>https://lorenzofox.dev/posts/coroutine/</id>
    <content xml:lang="en" type="html">&lt;p&gt;
    A &lt;a href=&quot;https://en.wikipedia.org/wiki/Coroutine&quot;&gt;coroutine&lt;/a&gt; is a function whose execution can be suspended and resumed, possibly passing some data. They happen to be useful for implementing various patterns involving cooperation between different tasks/functions such as asynchronous flows for example.
&lt;/p&gt;</content>
  </entry>
</feed>
